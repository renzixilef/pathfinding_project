void GridGenerator::DrunkenWalk::generateObstacles(Grid &grid, float obstacleDensity, float minStartEndDistance) {
    using GridGenerator::GridCoordinate;
    // initial variables
    uint32_t sizeX = grid.getSizeX();
    uint32_t sizeY = grid.getSizeY();
    auto numObstacles = static_cast<uint64_t>(sizeX * sizeY * static_cast<double>(1 - obstacleDensity));
    std::uniform_int_distribution<uint32_t> distrX(0, sizeX - 1);
    std::uniform_int_distribution<uint32_t> distrY(0, sizeY - 1);
    std::uniform_int_distribution<uint8_t> distrDir(1, 10);

    do {
        // mark all cells in the array as unwalkable
        for (uint32_t i = 0; i < sizeX; i++)
            for (uint32_t j = 0; j < sizeY; j++)
                grid(GridCoordinate(i, j)).markObstacle();

        // carve out paths using the DrunkenWalk algorithm
        uint32_t currentX = distrX(gen);
        uint32_t currentY = distrY(gen);

        // if obstacleDensity is close to 1 this will take exponentially longer
        for (uint64_t i = 0; i < numObstacles; i++) {
            GridCoordinate thisCoord{currentX, currentY};
            if (grid(thisCoord).getState() == CellState::CELL_OBSTACLE) {
                grid(thisCoord).markOpen();
            } else {
                i--;
            }
            uint8_t direction = distrDir(gen);
            uint32_t oldX = currentX;
            uint32_t oldY = currentY;
            int8_t dx = distrX(gen) > (sizeX / 2) ? 1 : -1;
            int8_t dy = distrY(gen) > (sizeY / 2) ? 1 : -1;

            if (direction <= 2) {
                currentX = (currentX + dx + sizeX) % sizeX;
                currentY = (currentY + dy + sizeY) % sizeY;
            } else {
                if (direction <= 6) currentY = (currentY + dy + sizeY) % sizeY;
                else currentX = (currentX + dx + sizeX) % sizeX;
            }
            if (oldX == currentX && oldY == currentY) {
                if (direction <= 6) currentX = (currentX + dx + sizeX) % sizeX;
                else currentY = (currentY + dy + sizeY) % sizeY;
            }
        }
    } while (!setStartAndEndCoordinate(grid, minStartEndDistance));
}